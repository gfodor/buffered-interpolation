const INITIALIZING=0,BUFFERING=1,PLAYING=2,PAUSED=3,MODE_LERP=0,MODE_HERMITE=1,vectorPool=[],quatPool=[],framePool=[],getPooledVector=()=>vectorPool.shift()||new THREE.Vector3,getPooledQuaternion=()=>quatPool.shift()||new THREE.Quaternion,getPooledFrame=()=>{let a=framePool.pop();return a||(a={position:new THREE.Vector3,velocity:new THREE.Vector3,scale:new THREE.Vector3,quaternion:new THREE.Quaternion,time:0}),a},freeFrame=a=>framePool.push(a),almostEqualVec3=function(a,b,c){var d=Math.abs;return d(a.x-b.x)<c&&d(a.y-b.y)<c&&d(a.z-b.z)<c},almostEqualQuat=function(a,b,c){var d=Math.abs;return d(a.x-b.x)<c&&d(a.y-b.y)<c&&d(a.z-b.z)<c&&d(a.w-b.w)<c};class InterpolationBuffer{constructor(a=MODE_LERP,b=.15){this.state=INITIALIZING,this.buffer=[],this.bufferTime=1e3*b,this.time=0,this.lastTailCopyFrame=null,this.mode=a,this.originFrame=getPooledFrame(),this.position=new THREE.Vector3,this.quaternion=new THREE.Quaternion,this.scale=new THREE.Vector3(1,1,1)}hermite(a,b,c,d,e,f){const g=b*b,h=b*b*b;a.copy(c.multiplyScalar(2*h-3*g+1)),a.add(d.multiplyScalar(-2*h+3*g)),a.add(e.multiplyScalar(h-2*g+b)),a.add(f.multiplyScalar(h-g))}lerp(a,b,c,d){a.lerpVectors(b,c,d)}slerp(a,b,c,d){THREE.Quaternion.slerp(b,c,a,d)}updateOriginFrameToBufferTail(){freeFrame(this.originFrame),this.originFrame=this.buffer.shift()}appendBuffer(a,b,c,d){const e=0<this.buffer.length?this.buffer[this.buffer.length-1]:null;if(e&&e.time===this.time)a&&e.position.copy(a),b&&e.velocity.copy(b),c&&e.quaternion.copy(c),d&&e.scale.copy(d);else{const f=e||this.originFrame,g=getPooledFrame();g.position.copy(a||f.position),g.velocity.copy(b||f.velocity),g.quaternion.copy(c||f.quaternion),g.scale.copy(d||f.scale),g.time=this.time,this.buffer.push(g)}this.state===PAUSED&&(this.state=PLAYING)}setTarget(a,b,c,d){this.appendBuffer(a,b,c,d)}setPosition(a,b){this.appendBuffer(a,b,null,null)}setQuaternion(a){this.appendBuffer(null,null,a,null)}setScale(a){this.appendBuffer(null,null,null,a)}update(a,b){var c=Math.abs;if(this.state===INITIALIZING&&0<this.buffer.length&&(this.updateOriginFrameToBufferTail(),this.position.copy(this.originFrame.position),this.quaternion.copy(this.originFrame.quaternion),this.scale.copy(this.originFrame.scale),this.state=BUFFERING),this.state===BUFFERING&&0<this.buffer.length&&this.time>this.bufferTime&&(this.state=PLAYING),this.state===PAUSED){const b=this.buffer[0];return b.time=this.time+a,!1}if(this.state===PLAYING){let d=!1;const e=this.time-this.bufferTime;for(;0<this.buffer.length&&e>this.buffer[0].time;)if(1<this.buffer.length)this.updateOriginFrameToBufferTail();else{const b=this.buffer[0];this.originFrame.position.copy(b.position),this.originFrame.velocity.copy(b.velocity),this.originFrame.quaternion.copy(b.quaternion),this.originFrame.scale.copy(b.scale),this.originFrame.time=b.time,b.time=this.time+a,d=!0}if(0<this.buffer.length&&0<this.buffer[0].time){const a=this.buffer[0],f=a.time-this.originFrame.time,g=(e-this.originFrame.time)/f;if(b&&(c(a.position.x-this.originFrame.position.x)>b||c(a.position.y-this.originFrame.position.y)>b||c(a.position.z-this.originFrame.position.z)>b)?this.position.set(a.position.x,a.position.y,a.position.z):this.mode===MODE_LERP?this.lerp(this.position,this.originFrame.position,a.position,g):this.mode===MODE_HERMITE&&this.hermite(this.position,g,this.originFrame.position,a.position,this.originFrame.velocity.multiplyScalar(f),a.velocity.multiplyScalar(f)),this.slerp(this.quaternion,this.originFrame.quaternion,a.quaternion,g),this.lerp(this.scale,this.originFrame.scale,a.scale,g),d){const b=almostEqualVec3(this.position,a.position,1e-4),c=almostEqualQuat(this.quaternion,a.quaternion,.001),d=almostEqualVec3(this.scale,a.scale,1e-4);b&&c&&d&&(this.state=PAUSED)}}}return this.state!==INITIALIZING&&(this.time+=a),!0}getPosition(){return this.position}getQuaternion(){return this.quaternion}getScale(){return this.scale}}module.exports=InterpolationBuffer;
